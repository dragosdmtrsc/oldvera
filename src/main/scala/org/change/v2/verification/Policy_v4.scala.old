package org.change.v2.verification

import org.change.v2.analysis.constraint.NOT
import org.change.v2.analysis.memory.State
import org.change.v2.analysis.processingmodels._
import org.change.v2.analysis.processingmodels.instructions.{Fail => SEFLFail, _}
import org.change.v2.verification.Formula._


/**
 * Created by matei on 12/01/17.
 * TODO: optimise such that subformulae are not checked repeatedly. Suspended because it might make debugging harder
 */


object Policy_v4 {

  type Topology = Map[LocationId,Instruction]

  //def mode = ModelCheckMode::Nil
  //def mode = OverallMode::LocMode::Nil
  def mode = Nil

  def EF(f:Formula) = Exists(Future(f))
  def AF(f:Formula) = Forall(Future(f))
  def EG(f:Formula) = Exists(Globally(f))
  def AG(f:Formula) = Forall(Globally(f))

  def EF(p:Instruction) = Exists(Future(Atomic(p)))
  def AF(p:Instruction) = Forall(Future(Atomic(p)))
  def EG(p:Instruction) = Exists(Globally(Atomic(p)))
  def AG(p:Instruction) = Forall(Globally(Atomic(p)))

  def And(p:Instruction, pp:Instruction) : Formula = Formula.And(Atomic(p),Atomic(pp))
  def And(f:Formula, fp:Formula) : Formula = Formula.And(f,fp)

  def Or(p:Instruction, pp:Instruction) : Formula = Formula.Or(Atomic(p),Atomic(pp))
  def Or(f:Formula, fp:Formula) : Formula = Formula.Or(f,fp)

  def state : NoMapState = new NoMapState(State.bigBang)
  def state(l:LocationId, t: Topology, links:Map[LocationId,LocationId]) =
    new MapState(l,t,links,State.bigBang)



  // very simplistic implementation of complement
  def complement (i : Instruction) : Instruction = {
    i match {
      case InstructionBlock(l) => Fork(l.map(complement))
      case ConstrainNamedSymbol(v,dc,c) => ConstrainNamedSymbol(v,:~:(dc),c) // negation of constrain
      case ConstrainRaw(a,dc,c) => ConstrainRaw(a,:~:(dc),c) // as above
      case _ => i // the complement leaves an instruction unchanged, for all other cases (for now)
    }
  }

  def isSatisfied (state: PolicyState, i : Instruction ) : Boolean = {
    var comp = complement(i)
    state.execute(comp) match {
      case FailedState => true
      case _ => false
    }
  }

  def isComposite (i: Instruction) : Boolean =
    i match {
      case InstructionBlock(_) => true
      case Fork(_) => true
      case _ => false
    }


  def show (i : Instruction) : String = show(i,0)

  /*
   case InstructionBlock(l) => "{"+(l.map(show).reduce((x,y)=> x+" ; "+y))+"}"
   case Fork(l) => "{"+(l.map(show).reduce((x,y)=> x+" || "+y))+"}"
   case ConstrainRaw(a,b,c) => a.toString+b.toString
   case AssignRaw(a,b,c) => a.toString+"="+b.toString
   case Forward(p)=> "Forward("+p.toString+")"
   */

  def show (i : Instruction, indent: Integer) : String = {
      def aux (sep : String, l : Iterable[Instruction], indent : Integer) = "{ \n"+(l.map((x)=>show(x,indent+1)).reduce((x,y)=> x+("  "*indent)+sep+"\n"+y)) + ("  "*indent) + "} \n"

      ("  "*indent) + {i match {
      case InstructionBlock(Nil) => "{;}"
      case Fork(Nil) => "{||}"
      case InstructionBlock(l) => aux(" ; ", l, indent)
      case Fork(l) => aux(" || ", l, indent)
      case ConstrainRaw(a,b,c) => a.toString+b.toString
      case AssignRaw(a,b,c) => a.toString+"="+b.toString
      case If(test,th,el) => "if ("+test.toString+") then {"+show(th,indent+1)+"} else {"+show(el,indent+1)+"}"
      case Forward(p)=> "Forward("+p.toString+")"
      case SEFLFail(_) => "Fail"
      case AllocateSymbol(s) => "allocate("+s+")"
      case AllocateRaw(s,sz) => "allocate_raw("+s+")"
      case DeallocateRaw(s,_) => "deallocate("+s+")"
      case DeallocateNamedSymbol(s) => "deallocate_n("+s+")"
      case CreateTag(s,v) => "createTag("+s+")"
      case AssignNamedSymbol(a,b,c) => a.toString+"="+b.toString
      case NoOp => "NoOp"
      }} + "\n"
  }



  def changesState (i: Instruction) : Boolean = true

  trait PrintMode {};
  case object MCMode extends PrintMode;
  case object LocMode extends PrintMode;
  case object OverallMode extends PrintMode;

  def verbose_print(s : String, t : PrintMode ) = if (mode.contains(t)) println(s)

  def atomic_check (p : Instruction, s : PolicyState) : Formula =
    if (isSatisfied(s, p)) {verbose_print (show(p)+" is true \n",MCMode); make(Atomic(p),Satisfied)} else {verbose_print (show(p)+" is false \n",MCMode); make(Atomic(p),Falsified)}

  /*
  def seqcheck (f: Formula, s : VState): Formula = {
    verbose_print("Verifying formula "+f)
    if (f.status != Pending) return f //this formula was already verified

    //verbose_print("In state "+s)
    f match {
      case fp@(Forall(Globally(_)) | Exists(Globally(_))) =>
        var fpp = fp.inner.inner // the inner formula
        var fx = seqcheck(fpp,s)
        fx.status match {
          // if fpp is false, then "XG fpp" is false
          case Falsified => make(fp,Falsified)
          // the current formula needs to be checked in future states
          case _ => reeval(fp)
        }

      case fp@(Forall(Future(_)) | Exists(Future(_))) =>
        var fpp = fp.inner.inner // the inner formula
        var fx = seqcheck(fpp,s)

        fx.status match {
          // if fpp is true, then "XF fpp" is true
          case Satisfied => make(fp,Satisfied)
          // if fpp is false, then "XF fpp" is an obligation
          // if fpp is pending, then "XF fpp" is pending
          case _ => reeval(fp)

        }
      case Forall(_) | Exists(_) => throw new Exception("Not a CTL formula")

      case Atomic(p) => atomic_check(p,s)

        // must be a boolean formula
      case fp => boolean_check(fp,s,seqcheck)

    }
  }
  */

  /* VG ( VG f )  if VG is pending, it is not false in the current state, hence the search continues.
     VG f - if f is pending, then if it is true in a future state, it will be true in the current (pending) state


   */


  // this procedure verifies boolean formulae (and is independent on the program context verification, unlike temporal formulae
  // the check function represents the "program context" in which it appears
  def boolean_check (f:Formula, s:PolicyState, check : (Formula, PolicyState) => Formula) : Formula = {
    verbose_print("boolean check",MCMode)
    if (f.status != Pending) {verbose_print("already verified",MCMode);return f} //this formula was already verified


    f match {
      case fp@And(f1, f2) => check(f1, s).status match {
        case Falsified => make(fp,Falsified)
        // pending or satisfied
        case status => check(f2, s).status match {
          case Falsified => make(fp,Falsified)
          case Satisfied => make(fp,status) //whatever f1 returned is the new status
          case Pending => make(fp,Pending) //if f2 is pending and f1 is not false, the AND is pending
        }
      }
      case fp@Or(f1, f2) => check(f1, s).status match {
        case Satisfied => make(fp,Satisfied)
        case status => check(f2,s).status match {
          case Satisfied => make(fp,Satisfied)
          case Falsified => make(fp,status)
          case Pending => make(fp,Pending)
        }
      }
      case fp@Not(f) => check(f, s).status match {
        case Falsified => make(fp,Satisfied)
        case Satisfied => make(fp,Falsified)
        case Pending => make(fp,Pending)
      }

      case fp@Atomic(i) => atomic_check(i,s)
    }
  }

  /*
  //verifies a formula in a final state of a path
  def final_check (f: Formula, s : VState): Formula = {
    verbose_print("Verifying in final state formula "+f)
    if (f.status != Pending) return f //this formula was already verifieds

    //verbose_print("In state "+s)
    f match {
      case fp@(Forall(Globally(_)) | Exists(Globally(_)) | Forall(Future(_)) | Exists(Future(_))) => //temporal operators are evaluated in the final state.
        var fpp = fp.inner.inner // the inner formula
        final_check(fpp, s).status match {
          case Satisfied => make(fp,Satisfied)
          case _ => make (fp,Falsified)         // if the formula is still pending or false in the final state, then is is false
        }

      case fp@(Atomic(i)) => atomic_check(i,s)
      // must be a boolean formula
      case fp => boolean_check(fp, s, final_check)
    }
  }
*/

  // if a formula is declared pending, all its subformulae are declared pending, which prompts re-evaluation
  def make(f:Formula, s:Status) : Formula = {f.status = s; f}
  def clear(f:Formula) : Formula = {f.clear_valuation(); f}
  def reeval(f:Formula) : Formula = make(clear(f),Pending)



  /*def check (f : Formula, p: Instruction, s : VState) : Formula = {
    verbose_print("Verifying " + f + "\n on program \n" + show(p))

    //matching after formula and program
    (f,p) match {
      // if the formula is boolean, we evaluate it
      case (And(_,_),_) | (Or(_,_),_) | (Not(_),_)  => boolean_check(f,s,(f,s) => check(f,p,s))
      //this is a 'continuation', which 'stores' the program to check


      // instructionBlock situations
      case (_,InstructionBlock(pr :: Nil)) => check(f, pr, s) //single-instruction
      case (_,InstructionBlock(InstructionBlock(l) :: prp :: rest))
      => check(f, InstructionBlock(l ++ (prp :: rest)), s) // flatten nested instruction blocks
      case (_,InstructionBlock(Fork(l) :: rest)) // distribute Fork instructions
      => check(f,
        Fork(l.map(p => InstructionBlock(p :: rest)))
        , s)

      case(_,InstructionBlock(pr :: prp :: rest)) => //take an instruction
        s.execute(pr) match {
          case (Nil, _) => f match {case Exists(_) => make (f,Falsified) ; case _ => make(f,Satisfied) }
          case (sp :: _, _) => if (!changesState(pr))
                                check(f, InstructionBlock(prp :: rest), sp) // execute one instruction and continue
                                else {
                                    val fp = seqcheck(f,sp) // verify f after this new state
                                    if (fp.status == Falsified || fp.status == Satisfied) //truth-value established
                                      f
                                    else
                                      check(fp, InstructionBlock(prp :: rest), sp)
                                  }
        }

      /*
      case (_,InstructionBlock(pr :: prp :: rest)) => //just an instruction
        if (!changesState(pr)) {
          // if this instruction does not change state, we simply execute it and continue
          s.execute(pr) match {
            case (Nil, _) => make(f,Satisfied) //the path is unsuccessful, hence the formula is trivially true
            case (sp :: _, _) => check(f, InstructionBlock(prp :: rest), sp) // execute one instruction and continue
          }
        } else {
          // if at this instruction we need to look at the formulae, we check each of our obligations
          // and generate new obligations (newo)


          s.execute(pr) match {
            case (Nil, _) => make(f,Satisfied) //the path is unsuccessful, the formula is trivially true
            case (sp :: _, _) => {
              val fp = seqcheck(f,sp)
              if (fp.status == Falsified || fp.status == Satisfied) //truth-value established
                f
              else
                check(fp, InstructionBlock(prp :: rest), sp)
            }
          }

        }
        */


      case (_,Fork(pr::Nil)) => verbose_print("Checking final branch:\n"+show(pr)); check (f,pr,s) // single-instruction fork
      case (_,Fork(pr::rest)) => verbose_print("Checking branch:\n"+show(pr)); (f, check (f,pr,s).status) match { //execute the first branch of the Fork
        case (Exists(_),Satisfied) => make(f,Satisfied)
        case (Forall(_),Pending) | (Forall(_),Falsified) => make(f,Falsified)
        case (Exists(_),_) | (Forall(_),Satisfied) => check(reeval(f),Fork(rest),s) //the formula must be made pending for the next branch verification
      }

        // IF implementation
      case (_,If(testInstr: Instruction, thenWhat: Instruction, elseWhat:Instruction)) =>
        testInstr match {
          // This is quite inappropriate
          case i @ ConstrainNamedSymbol(what, withWhat, _) => {
            withWhat instantiate s.state match {
              case Left(c) if s.state.memory.symbolIsAssigned(what) =>
                check(f,Fork(InstructionBlock(ConstrainNamedSymbol(what, withWhat), thenWhat),
                             InstructionBlock(ConstrainNamedSymbol(what, :~:(withWhat), Some(NOT(c))), elseWhat)),s)
              case _ => check(f,elseWhat,s)
            }
          }
          case rawi @ ConstrainRaw(what, withWhat, _) => what(s.state) match {
            case Some(i) => withWhat instantiate s.state match {
              case Left(c) if s.state.memory.canRead(i) =>
                check(f,Fork(InstructionBlock(ConstrainRaw(what, withWhat), thenWhat),
                        InstructionBlock(ConstrainRaw(what, :~:(withWhat), Some(NOT(c))), elseWhat)),s)

              case _ => check(f,elseWhat,s)
            }
            case None => check(f,elseWhat,s)
          }
        }



        // forwarding instruction received
      case (_,Forward(loc)) => if (s.hasTopology && s.locationDefined(loc))
                                  check(f,s.instructionAt(loc),s.step(loc))
                                else check(f,NoOp,s) // we simply ignore Forward, and treat it as NoOp

      // a non-branching instruction at this level ends execution
      case (_,pr) => s.execute(pr) match {
        case (Nil, _) => f match {case Exists(_) => make (f,Falsified) ; case _ => make(f,Satisfied) }
        case (sp::_ , _) => println("Program :"+pr); final_check(f,sp)
      }

    }
  }
*/

def check (f : Formula, p: Instruction, s : PolicyState) : Formula = {
   verbose_print("Verifying " + f + "\n on program \n" + show(p),OverallMode)

   //matching after formula and program
   (s,f,p) match {
      // failed state
     case (FailedState,Forall(Globally(_)),_) | (FailedState,Exists(Globally(_)),_) => verbose_print ("FG(f) is true (failed state)\n",OverallMode); make(f,Satisfied)
     case (FailedState,_,_) => verbose_print ("f is false (failed state)\n",OverallMode); make(f,Falsified)

     // if the formula is boolean, we evaluate it, using 'check'
     case (_,And(_,_),_) | (_,Or(_,_),_) | (_,Not(_),_)  => boolean_check(f,s,(f,s) => check(f,p,s))

     //flattening nested instruction blocks
     case (_,_,InstructionBlock(InstructionBlock(l) :: prp :: rest))
        => check(f, InstructionBlock(l ++ (prp :: rest)), s) // flatten nested instruction blocks

     // instructionBlock basis cases
     case (_,Forall(Globally(_)),InstructionBlock(Nil)) |
          (_,Exists(Globally(_)),InstructionBlock(Nil)) |
          (_,Success,InstructionBlock(Nil)) => verbose_print ("f is true (InstructionBlock ended)\n",OverallMode); make(f,Satisfied)


     case (_,_,InstructionBlock(Fork(l) :: rest)) // distribute Fork instructions
         => check(f,
           Fork(l.map(p => InstructionBlock(p :: rest)))
           , s)

     case (_,_,InstructionBlock(pr :: rest)) => //take an instruction
       var fval = check(f,pr,s.execute(pr)) // execute program pr in state s, then check it
       (fval.status,f) match {
         // s, p;rest |= XG f  iff  s,p |= XG f   and p(s),rest |= XG f
         case (Falsified,Forall(Globally(_))) | (Falsified,Exists(Globally(_))) => verbose_print ("f is false (failed check of an instruction in an IB)\n",OverallMode); make(f,Falsified)
           // otherwise continue verification
         case (_,Forall(Globally(_))) | (_,Exists(Globally(_))) => check(reeval(fval),InstructionBlock(rest),s.execute(pr))

         case (Satisfied,Forall(Future(_))) | (Satisfied,Exists(Future(_))) => verbose_print ("f is true (successful check of an instruction in an IB)\n",OverallMode); make(f,Satisfied)
         case (_,Forall(Future(_))) | (_,Exists(Future(_))) => check(reeval(fval),InstructionBlock(rest),s.execute(pr))

         case (_,Forall(_)) | (_,Exists(_)) => throw new Exception("Not a CTL formula")

         case (_,_) => fval // if the formula is not temporal, it has been checked;

       }

     case (_,Forall(_),Fork(Nil)) => verbose_print("Final branch checked\n",MCMode); verbose_print ("f is true (finished a Fork)\n",OverallMode); make(f,Satisfied)
     case (_,Exists(_),Fork(Nil)) => verbose_print("Final branch checked\n",MCMode); verbose_print ("f is false (finished a Fork)\n",OverallMode); make(f,Falsified)

     case (_,_,Fork(pr::rest)) => verbose_print("Checking branch:\n"+show(pr),MCMode);
       (f,check(f,pr,s).status) match {
         case (Exists(_),Satisfied) => verbose_print ("f is true (on a Fork branch)\n",OverallMode); make (f, Satisfied)
         case (Forall(_),Pending) | (Forall(_),Falsified) => verbose_print ("f is false (on a Fork branch)\n",OverallMode); make(f,Falsified)
         case (Exists(_),_) | (Forall(_),Satisfied) => check(reeval(f),Fork(rest),s) //the formula must be made pending for the next branch verification

         case (_,_) => throw new Exception ("Cannot evaluate non-temporal formula on a Fork ")

       }

       // IF implementation
     case (_,_,If(testInstr: Instruction, thenWhat: Instruction, elseWhat:Instruction)) =>
       testInstr match {
         // This is quite inappropriate
         case i @ ConstrainNamedSymbol(what, withWhat, _) => {
           withWhat instantiate s.state match {
             case Left(c) if s.state.memory.symbolIsAssigned(what) =>
               check(f,Fork(InstructionBlock(ConstrainNamedSymbol(what, withWhat), thenWhat),
                            InstructionBlock(ConstrainNamedSymbol(what, :~:(withWhat), Some(NOT(c))), elseWhat)),s)
             case _ => check(f,elseWhat,s)
           }
         }
         case rawi @ ConstrainRaw(what, withWhat, _) => what(s.state) match {
           case Some(i) => withWhat instantiate s.state match {
             case Left(c) if s.state.memory.canRead(i) =>
               check(f,Fork(InstructionBlock(ConstrainRaw(what, withWhat), thenWhat),
                       InstructionBlock(ConstrainRaw(what, :~:(withWhat), Some(NOT(c))), elseWhat)),s)

             case _ => check(f,elseWhat,s)
           }
           case None => check(f,elseWhat,s)
         }
       }

       // forwarding instruction received
     case (_,_,Forward(loc)) => s match {
       case sp@MapState(_,_,_,_) => if (!sp.locationDefined(loc)) throw new Exception("Location "+loc+" not found")
                                    else verbose_print("Switching to location "+loc,LocMode); check(f,sp.instructionAt(loc),sp.step(loc))
       case _ => verbose_print("Ignoring Forward instr.",LocMode); check(f,NoOp,s)

     }
       // *  *  *  *  *  *  *  *
       // non-branching programs
       // *  *  *  *  *  *  *  *

       // if the current instruction does not change state, the status of f is unchanged
     case _ => if (!changesState(p)) f else (f,p) match {
             // temporal formula on non-branching program
           case (Exists(Globally(_)),_) | (Forall(Globally(_)),_) |
                (Exists(Future(_)),_) | (Forall(Future(_)),_)
                => make(f,check(f.inner.inner,p,s).status)

           case (Atomic(fp),_) => atomic_check(fp,s)
           case _ => throw new Exception ("non-branching program on non-temporal formula: "+f)

         }
   }
 }


  // "top-level" verification procedure for topologies
  def verify (f: Formula, start:LocationId ,topology: Topology, links:Map[LocationId,LocationId]) : Boolean = {

    check(f,topology(start),state(start,topology,links)).status match {
      case Falsified => verbose_print("Formula is false",OverallMode); false     // should report the failing path
      case Satisfied => verbose_print("Formula is true",OverallMode); true
      case Pending => verbose_print("There are still pending subformulae",OverallMode); false

    }
  }


  // "top-level" verification procedure for plain SEFL code
  def verify (f : Formula, model : Instruction) : Boolean = {
    check(f,model,state).status match {
      case Falsified => verbose_print("Formula is false",OverallMode); false     // should report the failing path
      case Satisfied => verbose_print("Formula is true",OverallMode); true
      case Pending => verbose_print("There are still pending subformulae",OverallMode); false

    }
  }

}

