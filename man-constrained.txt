   | 'in_port=' port   #in_port
   | 'dl_vlan=' NUMBER   #dl_vlan
   | 'dl_vlan_pcp=' NUMBER   #dl_vlan_pcp
   | 'dl_src=' mac   #dl_src
   | 'dl_dst=' mac   #dl_dst
   | 'dl_src=' mac/mac   #dl_src
   | 'dl_dst=' mac/mac   #dl_dst
   | 'dl_type=' NUMBER   #dl_type
   | 'nw_src=' IP ('/' mask)   #nw_src
   | 'nw_dst=' IP ('/' mask)   #nw_dst
   | 'nw_proto=' NUMBER   #nw_proto
   | 'nw_tos=' NUMBER   #nw_tos
   | 'nw_ecn=' NUMBER   #nw_ecn
   | 'nw_ttl=' NUMBER   #nw_ttl
   | 'tp_src=' NUMBER   #tp_src
   | 'tp_dst=' NUMBER   #tp_dst
   | 'tp_src=' NUMBER ('/' NUMBER)   #tp_src
   | 'tp_dst=' NUMBER ('/' NUMBER)   #tp_dst
   | 'icmp_type=' NUMBER   #icmp_type
   | 'icmp_code=' NUMBER   #icmp_code
   | 'table=' NUMBER   #table
   | 'metadata=' NUMBER[/NUMBER]   #metadata
   | 'ip'     //Same as dl_type=0x0800.   #ip
   | 'icmp'   //Same as dl_type=0x0800,nw_proto=1.   #icmp
   | 'tcp'  //Same as dl_type=0x0800,nw_proto=6.   #tcp
   | 'udp'    //Same as dl_type=0x0800,nw_proto=17.   #udp
   | 'sctp'   //Same as dl_type=0x0800,nw_proto=132.   #sctp
   | 'arp'    //Same as dl_type=0x0806.   #arp
   | 'rarp'   //Same as dl_type=0x8035.   #rarp
   
   | 'vlan_tci=' NUMBER '/' NUMBER?   #vlan_tci
   | 'ip_frag=' frag_type   #ip_frag
          no     Matches only non-fragmented packets.
          yes    Matches all fragments.
          first  Matches only fragments with offset 0.
          later  Matches only fragments with nonzero offset.
          not_later
                 Matches non-fragmented packets and fragments with zero offset.
   | 'arp_sha=' mac   #arp_sha
   | 'arp_tha=' mac   #arp_tha
   | 'ipv6_src=' ipv6 ('/' NUMBER)?   #ipv6_src
   | 'ipv6_dst=' ipv6 ('/' NUMBER)?   #ipv6_dst
   | 'ipv6_label=' label   #ipv6_label
   | 'nd_target=' ipv6 ('/' NUMBER)?   #nd_target
   | 'nd_sll=' mac   #nd_sll
   | 'nd_tll=' mac   #nd_tll
   | 'tun_id=' tunnel-id ('/' NUMBER)?   #tun_id
   | 'tun_src=' ip ('/' mask)   #tun_src
   | 'tun_dst=' ip ('/' mask)   #tun_dst
   | 'regidx=' value ('/' mask)   #regidx
   | 'pkt_mark=' value ('/' mask)   #pkt_mark
   | 'ipv6'   //Same as dl_type=0x86dd.   #ipv6
   | 'tcp6'   //Same as dl_type=0x86dd,nw_proto=6.   #tcp6
   | 'udp6'   //Same as dl_type=0x86dd,nw_proto=17.   #udp6
   | 'sctp6'  //Same as dl_type=0x86dd,nw_proto=132.   #sctp6
   | 'icmp6'  //Same as dl_type=0x86dd,nw_proto=58.        #icmp6
   'actions=' target? (',' target)*
          'output:' port
          'output:src[' NUMBER '..' NUMBER ']'
          'enqueue:' port ':' NAME
          'normal'
          'flood'
          'all'
          'controller('params? (',' params)* ')'
             params : 'max_len=' NUMBER |
             'reason=' reason | 
             'id=' controller-id;
             reason : action, no_match, invalid_ttl;
          'controller'
          'controller:' NUMBER?
          'local'
          'in_port'
          'drop'
          'mod_vlan_vid:' NUMBER
          'mod_vlan_pcp:' NUMBER
          'strip_vlan'
          'push_vlan:' NUMBER
          'push_mpls:' NUMBER
          'pop_mpls:' NUMBER
          'mod_dl_src:' mac
          'mod_dl_dst:' mac
          'mod_nw_src:' ip
          'mod_nw_dst:' ip
          'mod_tp_src:' NUMBER
          'mod_tp_dst:' NUMBER
          'mod_nw_tos:' tos
         
          'resubmit:' NUMBER
          'resubmit('NUMBER? ',' table?)
          #set_tunnel:id
          #set_tunnel64:id
          'set_queue:' queue
          'pop_queue'
          'dec_ttl'
          'dec_ttl' ('(' id1 ',' id2 ')')?
          'set_mpls_ttl:' NUMBER
          'dec_mpls_ttl'
          #note:[hh]...
          'move:' 'src[' NUMBER '..' NUMBER ']->dst[' NUMBER '..' NUMBER ']'
          'load:' NUMBER '->dst[' NUMBER '..' NUMBER ']'
          'push:' 'src[' NUMBER '..' NUMBER ']'
          'pop:' dst[NUMBER..NUMBER]
          'set_field:' NUMBER->dst
          apply_actions([action][,action...])
          clear_actions
          'write_metadata:' NUMBER[/NUMBER]
          'goto_table:' table
          'fin_timeout('argument(',' argument ')')
                'idle_timeout=' NUMBER
                'hard_timeout=' NUMBER
          'sample(' argument(',' argument)* ')'
                 'probability=' packets
                 'collector_set_id=' id
                 'obs_domain_id=' id
                 'obs_point_id=' id
          'exit'
   | 'cookie=' NUMBER   #cookie
   | 'cookie=' NUMBER/NUMBER   #cookie
   | 'priority=' NUMBER   #priority
   | 'idle_timeout=' NUMBER   #idle_timeout
   | 'hard_timeout=' NUMBER   #hard_timeout
   | 'send_flow_rem'   #send_flow_rem
   | 'check_overlap'   #check_overlap
   | 'out_port=' port   #out_port

   | 'duration=' NUMBER   #duration
   | 'n_packets'   #n_packets
   | 'n_bytes'   #n_bytes
   | 'hard_age=' NUMBER   #hard_age
   | 'idle_age=' NUMBER   #idle_age
   
   
src :
'NXM_OF_IN_PORT' #inPort
| 'NXM_OF_ETH_DST' #ethDst
| 'NXM_OF_ETH_SRC' #ethSrc
| 'NXM_OF_ETH_TYPE' #ethType
| 'NXM_OF_VLAN_TCI' #vlanTci
| 'NXM_OF_IP_TOS' #ipTos
| 'NXM_OF_IP_PROTO' #ipProto
| 'NXM_OF_IP_SRC' #ipSrc
| 'NXM_OF_IP_DST' #ipDst
| 'NXM_OF_TCP_SRC' #tcpSrc
| 'NXM_OF_TCP_DST' #tcpDst
| 'NXM_OF_UDP_SRC' #udpSrc
| 'NXM_OF_UDP_DST' #udpDst
| 'NXM_OF_ICMP_TYPE' #icmpType 
| 'NXM_OF_ICMP_CODE' #icmpCode
| 'NXM_OF_ARP_OP' #arpOp
| 'NXM_OF_ARP_SPA' #arpSpa
| 'NXM_OF_ARP_TPA' #arpTpa
| 'NXM_NX_TUN_ID' #tunId
| 'NXM_NX_ARP_SHA' #arpSha
| 'NXM_NX_ARP_THA' #arpTha
| 'NXM_NX_ICMPV6_TYPE' #icmp6Type
| 'NXM_NX_ICMPV6_CODE' #icmp6Code
| 'NXM_NX_ND_SLL' #ndSll
| 'NXM_NX_ND_TLL' #ndTll
| 'NXM_NX_REG('NUMBER ')'  #regIdx;//for idx in the switch's accepted range.
dst :
| NXM_OF_ETH_DST #ethDst
| NXM_OF_ETH_SRC #ethSrc
| NXM_OF_IP_TOS #ipTos
| NXM_OF_IP_SRC #ipSrc
| NXM_OF_IP_DST #ipDst
| NXM_OF_TCP_SRC #tcpSrc
| NXM_OF_TCP_DST #tcpDst
| NXM_OF_UDP_SRC #udpSrc
| NXM_OF_UDP_DST #udpDst
| NXM_NX_REG(NUMBER) #regIdx
| NXM_OF_VLAN_TCI #vlanTci
| NXM_NX_TUN_ID #tunId;



              learn(argument[,argument]...)
                     idle_timeout=seconds
                     hard_timeout=seconds
                     priority=value
                     fin_idle_timeout=seconds
                     fin_hard_timeout=seconds
                     table=number
                     field=value
                     field[start..end]=src[start..end]
                     field[start..end]
                     load:value->dst[start..end]
                     load:src[start..end]->dst[start..end]
                     output:field[start..end]